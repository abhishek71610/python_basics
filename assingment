1. Explain the key features of Python that makes it a popular choice for programming.
   Python is the most accessible open-source coding language as it has a simple syntax to code. Because of its simplicity of learning and utilization, python codes can be handily composed and executed much more quickly than other programming dialects.This language covers vast areas of software development. Such as Data Analysis, AI/ML, Cloud Computing, Automation, Web Apps, Mobile Apps, Desktop Apps, Testing, and Hacking.It is simple, easy to learn, and used for different disciplines like Data Science, Mathematics, Visualization, and Automation.

2. Describe the role of predefined keywords in Python and provide examples of how they are used in a program.
   Predefined keywords in Python are reserved words that have specific meanings and cannot be used as variable names or identifiers. They form the foundation of the language's syntax and control its structure.

3. Compare and contrast mutable and immutable obects in Python with examples.
   Mutable vs. Immutable Objects in Python
   In Python, objects are classified into two categories based on their ability to change their values after creation: mutable and immutable.
   Mutable Objects
   Definition: Mutable objects can be modified after they are created.
   Examples: Lists, dictionaries, and sets.
   Immutable Objects
   Definition: Immutable objects cannot be changed once they are created. A new object must be created if you want to modify the value.
   Examples: Numbers (integers, floats), strings, tuples, and booleans.
   The choice between mutable and immutable objects depends on the specific requirements of your program. If you need to modify data structures frequently, mutable objects are often more suitable. If you need data structures that remain constant, immutable objects are a good choice.

4. Discuss the different types of operators in Python and provide examples of how they are used.
   Arithmetic Operators
   Used for mathematical calculations.
   Addition: +
   Subtraction: -
   Multiplication: *
   Division: /
   Floor division: // (returns the integer quotient)
   Modulus: % (returns the remainder)
   Exponentiation: **
   x = 10
   y = 3
   print(x + y)  # Output: 13
   print(x - y)  # Output: 7
   print(x * y)  # Output: 30
   print(x / y)  # Output: 3.3333333333333335
   print(x // y)  # Output: 3
   print(x % y)  # Output: 1
   print(x ** y)  # Output: 1000

   Comparison Operators
   Used to compare values.
   Equal to: ==
   Not equal to: !=
   Greater than: >
   Less than: <
   Greater than or equal to: >=
   Less than or equal to: <=
   a = 5
   b = 7
   print(a == b)  # Output: False
   print(a != b)  # Output: True
   print(a > b)  # Output: False
   print(a < b)  # Output: True
   print(a >= b)  # Output: False
   print(a <= b)  # Output: True

   Logical Operators
   Used to combine Boolean expressions.
   And: and (both conditions must be True)
   Or: or (at least one condition must be True)
   Not: not (reverses the truth value)
   x = True
   y = False
   print(x and y)  # Output: False
   print(x or y)  # Output: True
   print(not x)  # Output: False

   Bitwise Operators
   Used to perform operations on individual bits of binary numbers.
   Bitwise AND: &
   Bitwise OR: |
   Bitwise XOR: ^
   Bitwise NOT: ~
   Left shift: <<
   Right shift: >>   
   a = 10  # Binary: 1010
   b = 5   # Binary: 0101
   print(a & b)  # Output: 4 (Binary: 0100)
   print(a | b)  # Output: 15 (Binary: 1111)
   print(a ^ b)  # Output: 11 (Binary: 1011)
   print(~a)    # Output: -11 (Binary: 10101)
   print(a << 2)  # Output: 40 (Binary: 101000)
   print(a >> 2)  # Output: 2 (Binary: 0010)

   Membership Operators
   Used to check if a value is present in a sequence.
   In: in
   Not in: not in
   my_list = [1, 2, 3]
   print(3 in my_list)  # Output: True
   print(4 not in my_list)  # Output: True

   Identity Operators
   Used to check if two objects are the same instance.
   Is: is
   Is not: is not
   x = 5
   y = 5
   print(x is y)  # Output: True (both refer to the same integer object)

5. Explain the concept of type casting in Python with examples. 
   Type casting, also known as type conversion, is the process of converting one data type to another in Python. This is often necessary when performing operations that require specific data types or when working with data from different sources.
   For example, 
   x = 5
   y = 3.14
   z = x + y  # z will be a float: 8.14
6. How do conditional statements work in Python? Illustrate with examples.
   Conditional statements allow your Python program to make decisions and execute different code blocks based on specific conditions. They are essential for creating flexible and dynamic applications.

   The if Statement
   The most basic conditional statement is the if statement. It checks a condition and executes a block of code if the condition is true.
x = 10
if x > 0:
  print("x is positive")
  The if-else Statement
  The if-else statement provides an alternative block of code to execute if the condition is false.
x = -5
if x > 0:
  print("x is positive")
else:
  print("x is negative or zero")
  The if-elif-else statement allows you to check multiple conditions and execute different code blocks based on the first condition that is true.   

x = 0
if x > 0:
  print("x is positive")
elif x < 0:
  print("x is negative")
else:
  print("x is zero")
 Nested Conditional Statements
 You can nest conditional statements within each other to create more complex decision-making logic.
age = 18
has_driver_license = True

if age >= 16:
  if has_driver_license:
    print("You can drive.")
  else:
    print("You need to get a driver's license.")
else:
  print("You are too young to drive.")

7. Describe the different types of loops in Python and their use cases with examples.
   Loops are programming constructs that allow you to repeatedly execute a block of code until a certain condition is met. Python offers two main types of loops: for loops and while loops.   

   for Loops
   Purpose: Used to iterate over a sequence of items (e.g., lists, tuples, strings, dictionaries).
   fruits = ["apple", "banana", "orange"]
for fruit in fruits:
  print(fruit)
   Use Cases:

   Iterating over elements in a list, tuple, or string.
   Generating sequences of numbers using the range() function.
   Processing items from a dictionary or set.
   while Loops
   Purpose: Used to execute a block of code as long as a specified condition is true.
count = 0
while count < 5:
  print(count)
  count += 1
   Use Cases:
   Repeating a task until a specific condition is met (e.g., user input, reaching a target value).
   Creating infinite loops (though it's generally not recommended without a mechanism to break out).
